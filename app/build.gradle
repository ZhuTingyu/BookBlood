apply plugin: 'com.android.application'

android {
    updateVersionConfig()
    signingConfigs {
        book {
            keyAlias 'book'
            keyPassword 'cpigeon@2018'
            storeFile file('../keystore/book.jks')
            storePassword 'cpigeon@2018'
        }
    }
    compileSdkVersion 27
    defaultConfig {
        renderscriptTargetApi 27
        renderscriptSupportModeEnabled true
        applicationId "com.cpigeon.book"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode getCustomVersionCode()
        versionName getCustomVersionName()
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.book
        vectorDrawables.useSupportLibrary = true

        ndk {
            //选择要添加的对应cpu类型的.so库。
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a','x86','x86_64'
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'mips', 'mips64'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.cpigeon.book",
                JPUSH_APPKEY : "de92f1aaa26e29684c23ea57", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }

    buildTypes {
        release {
            //Zipalign优化
//            zipAlignEnabled true
//            //移除无用的resource文件
//            shrinkResources true
            debuggable true
            minifyEnabled true
            signingConfig signingConfigs.book
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            crunchPngs false
            signingConfig signingConfigs.book
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        incremental = true  //开启增量编译

    }

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    //如果是构建debug包, 则禁用 "png cruncher" (默认cruncherEnabled=true, 禁用以加速构建)
//    def enableCruncher = { ->
//        return !isDebug()
//    }

//    aaptOptions { //禁用cruncher, 以加速编译
//        cruncherEnabled = enableCruncher()
//        cruncherProcesses = 0
//    }

    dexOptions { //优化dex配置
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "2g"
    }

    //跳过Lint和Test相关的task, 以加速编译
    if (isDebug()) {
        gradle.taskGraph.whenReady {
            tasks.each { task ->
                if (task.name.contains("Test") || task.name.contains("Lint")) {
                    task.enabled = false
                }
            }
        }
    }

    //    //修改生成的apk名字
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def oldFile = output.outputFile
//            def newName = '';
//            if (variant.buildType.name.equals('release')) {
////                println(variant.productFlavors[0].name)
//                //def releaseApkName = 'app-release-v' + getCustomVersionName() + '-' + variant.productFlavors[0].name + '-' + getCustomVersionCode() + '.apk'
//                newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-" + getCustomVersionCode() + ".apk")
//                output.outputFile = new File(oldFile.parent, newName)
//            }
//            if (variant.buildType.name.equals('beta')) {
//                newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-beta" + getDate() + ".apk")
//                output.outputFile = new File(oldFile.parent, newName)
//            }
//            if (variant.buildType.name.equals('debug')) {
//                /*newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-" + getCustomVersionCode() + ".apk")
//                output.outputFile = new File(oldFile.parent, newName)*/
//            }
//        }
//    }

}

int getCustomVersionCode() {
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps['VERSION_CODE'].toInteger()
    }
}

def getCustomVersionName() {
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def name = versionProps['VERSION_NAME']
        return name
    }
}

def updateVersionConfig() {
    //如果version.properties文件可读则执行操作
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        //载入version.properties
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def buildTime = new Date()
        //上次次数重置时间与当前时间作对比
        Date lastResetBuildTime = new Date(versionProps['BUILD_TIMES_RESET_TIME'].toLong())
//        println lastResetBuildTime.year + "/" + lastResetBuildTime.month + "/" + lastResetBuildTime.day
//        println buildTime.year + "/" + buildTime.month + "/" + buildTime.day
        if (lastResetBuildTime.year != buildTime.year || lastResetBuildTime.month != buildTime.month || lastResetBuildTime.day != buildTime.day) {
            //如果重置时间不是当天的日期，则重置次数
            println '重置发布次数'
            versionProps['BUILD_TIMES'] = 0.toString()
            versionProps['BUILD_TIMES_RESET_TIME'] = buildTime.time.toString()
        }
        //写入编译时间
        versionProps['BUILD_LAST_TIME'] = buildTime.time.toString()
        //写入版本代码
        //versionProps['VERSION_CODE'] = new Date().format("yyyyMMdd") + versionProps['BUILD_TIMES'].toString()

        println(versionProps)
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

//是否是执行Debug相关task (通用函数, 可供子module调用)
def isDebug() {
    def taskNames = gradle.startParameter.taskNames
    for (tn in taskNames) {
        if( (tn.contains("install") || tn.contains("assemble")) && tn.contains("Debug")) {
            return true
        }
    }
    return false
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':core')
    compile 'com.android.support:support-dynamic-animation:27.0.2'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //facebook
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    compile 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.google.android.gms:play-services-maps:15.0.1'
    //视图注解
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    //日历
    compile 'com.haibin:calendarview:3.4.1'
    //开关按钮
    compile 'com.kyleduo.switchbutton:library:1.4.5'

    compile 'cn.jiguang.sdk:jpush:3.1.5'
    // 此处以JPush 3.1.5 版本为例。
    compile 'cn.jiguang.sdk:jcore:1.2.3'
    //
    compile 'me.shaohui:bottomdialog:1.1.9'
    compile 'com.android.support:multidex:1.0.3'
    implementation files('libs/open_sdk_r5788_lite.jar')
    implementation files('libs/SocialSDK_QQ_Full.jar')
    implementation files('libs/SocialSDK_WeiXin_Full.jar')
    implementation files('libs/umeng_social_api.jar')
    implementation files('libs/umeng_social_net.jar')
    implementation files('libs/umeng_social_tool.jar')

    //极光推送
    compile 'cn.jiguang.sdk:jpush:3.1.5'  // 此处以JPush 3.1.5 版本为例。
    compile 'cn.jiguang.sdk:jcore:1.2.3'  // 此处以JCore 1.2.3 版本为例。

    compile 'com.github.Hitomis:CrazyShadow:v1.0.1'

    compile 'q.rorbin:badgeview:1.1.3'

    compile 'com.github.paradoxie:ShopAnimDemo:0.1'

    //bugly
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    compile 'com.tencent.bugly:crashreport_upgrade:1.3.4'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'

    //网络请求框架
    compile 'org.xutils:xutils:3.5.0'

    //评分控件
    compile 'com.github.CB-ysx:CBRatingBar:3.0.1'
    compile 'com.github.everhad:AndroidRatingStar:v1.0.1'

    compile 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'
}
